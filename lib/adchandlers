var _data = require("./data");
var helpers = require("./helpers");

var handlers = {};

handlers.users = function (data, callback) {
  var acceptableMethods = ["post", "get", "put", "delete"];
  if (acceptableMethods.indexOf(data.method) > -1) {
    handlers._users[data.method](data, callback);
  } else {
    callback(405);
  }
};

//container for users submethods
handlers._users = {};

// user post
handlers._users.post = function (data, callback) {
  var firstName =
    typeof data.payload.firstName == "string " &&
    data.payload.firstName.trim().length > 0
      ? data.payload.firstName.trim()
      : false;
  var lastName =
    typeof data.payload.lastName == "string " &&
    data.payload.lastName.trim().length > 0
      ? data.payload.lastName.trim()
      : false;
  //   var phone =
  //     typeof data.payload.phone == "string " &&
  //     data.payload.phone.trim().length > 0
  //       ? data.payload.phone.trim()
  //       : false;
  var password =
    typeof data.payload.password == "string " &&
    data.payload.password.trim().length > 0
      ? data.payload.password
      : false;
  //   var tosAgreement =
  //     typeof data.payload.tosAgreement == "boolean " &&
  //     data.payload.tosAgreement == true
  //       ? true
  //       : false;

  //   var firstName = data.payload.firstName;
  //   var lastName = data.payload.lastName;
  var phone = data.payload.phone;
  //   var password = data.payload.password;
  //   console.log(
  //     data.payload.password.trim().length > 0 ? data.payload.password : false
  //   );
  console.log(
    typeof data.payload.password == "string" &&
      data.payload.password.trim().length > 0
      ? data.payload.password
      : false
  );
  var tosAgreement = data.payload.tosAgreement;

  //   if (firstName && lastName && phone && password && tosAgreement) {
  // make sure that the user dosent already exist
  _data.read("users", phone, function (err, data) {
    if (err) {
      // hash the password
      var hashedPassword = helpers.hash(password);
      if (hashedPassword) {
        var userObject = {
          firstName: firstName,
          lastName: lastName,
          phone: phone,
          hashedPassword: hashedPassword,
          tosAgreement: true,
        };

        //store the user
        _data.create("users", phone, userObject, function (err) {
          if (!err) {
            callback(200);
          } else {
            console.log(err);
            callback(500, { error: "could not create the user" });
          }
        });
      } else {
        callback(500, { error: "could not hash the password" });
      }
    } else {
      callback(400, { error: "A user with that phone no already exist" });
    }
  });
  //   } else {
  //     callback(400, { Error: "missing required fields" });
  //   }
};

// user get
handlers._users.get = function (data, callback) {};
// user put
handlers._users.put = function (data, callback) {};
// user delete
handlers._users.delete = function (data, callback) {};

handlers.hello = function (data, callback) {
  callback(200, { welcome: "Welcome to Pirple", data });
};

handlers.notFound = function (data, callback) {
  callback(404);
};

// export
module.exports = handlers;
